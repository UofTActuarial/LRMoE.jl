var documenterSearchIndex = {"docs":
[{"location":"dummytest/#Dummy","page":"Dummy","title":"Dummy","text":"","category":"section"},{"location":"dummytest/","page":"Dummy","title":"Dummy","text":"dummy","category":"page"},{"location":"framework/#Modelling-Framework","page":"Modelling Framework","title":"Modelling Framework","text":"","category":"section"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"The LRMoE model is formulated as follows. Let (mathbfx_i mathbfy_i) i = 1 2 dots n denote a set of observations, where mathbfx_i denotes the covariates and mathbfy_i the response(s).","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"Given mathbfx_i, the i-th observation is classified into one of g latent classes by the so-called logit gating function. The probability of belonging to the j-th latent class is given by","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"pi_j(mathbfx_i mathbfalpha) = fracexp (mathbfalpha_j^T mathbfx_i)sum_j=1^g exp (mathbfalpha_j^T mathbfx_i) quad j = 1 2 dots g-1","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"For model identifiability reasons, we assume mathbfalpha_g = mathbf0 which corresponds to the reference class.","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"Conditional on the latent class j, the distribution of the response mathbfy_i is given by an expert function with density","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"f_j(mathbfy_i mathbfpsi_j) = prod_d=1^D f_jd(mathbfy_id mathbfpsi_jd)","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"where we assume conditional independence of dimensions 1 2 dots D of mathbfy_i, if it is a vector of responses.","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"The likelihood function is therefore","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"L(mathbfalpha mathbfpsi mathbfx mathbfy) = prod_i=1^n left sum_j=1^g pi_j(mathbfx_i mathbfalpha) f_j(mathbfy_i mathbfpsi_j) right","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"Notice that the parameters mathbfpsi_j do not involve regression on the covariates mathbfx_i, hence the model is termed as reduced. For an introduction to the general mixture-of-experts models, see e.g. here.","category":"page"},{"location":"framework/","page":"Modelling Framework","title":"Modelling Framework","text":"Fung et al. (2019) have shown that such simplification of model structure will not reduce its flexibility, and will significantly reduce the computation efforts in model inference. The parameters to estimate are the regression coefficients mathbfalpha_j and parameters of the expert functions mathbfpsi_j, which is implemented by the standard Expectation-Conditional-Maximization algorithm (details omitted).","category":"page"},{"location":"experts/#Expert-Functions","page":"Expert Functions","title":"Expert Functions","text":"","category":"section"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"The LRMoE package supports a collection of distributions commonly used for modelling insurance claim frequency and severitiy.","category":"page"},{"location":"experts/#Common-Interface","page":"Expert Functions","title":"Common Interface","text":"","category":"section"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"Expert functions are implemented as subtypes of the AnyExpert type in this package.","category":"page"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"Considering zero inflation is prominant in many actuarial applications, expert functions can be either zero-inflated or not.","category":"page"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"# Abstract type: whether the expert is zero-inflated\nabstract type ZeroInflation end\nstruct ZI <: ZeroInflation end\nstruct NonZI <: ZeroInflation end","category":"page"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"Expert functions can be defined either on the real line, or only on nonnegative values (as is usually the case for actuarial loss modelling).","category":"page"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"abstract type ExpertSupport end\nstruct RealValued <: ExpertSupport end\nstruct NonNegative <: ExpertSupport end","category":"page"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"Each expert function is a univariate distribution (see UnivariateDistribution in Distributions.jl), with appropriate support and indication of zero inflation. ","category":"page"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"# Abstract type: AnyExpert\nabstract type AnyExpert{s<:ExpertSupport, z<:ZeroInflation, d<:UnivariateDistribution} end\n# Discrete or Continuous\nconst DiscreteExpert{s<:ExpertSupport, z<:ZeroInflation} = AnyExpert{s, z, DiscreteUnivariateDistribution}\nconst ContinuousExpert{s<:ExpertSupport, z<:ZeroInflation} = AnyExpert{s, z, ContinuousUnivariateDistribution}\n# Real-valued expert distributions\nconst RealDiscreteExpert = DiscreteExpert{RealValued, NonZI}\nconst RealContinuousExpert = ContinuousExpert{RealValued, NonZI}\n# Nonnegative-valued expert distributions: actuarial-specific\nconst NonNegDiscreteExpert{z<:ZeroInflation} = DiscreteExpert{NonNegative, z}\nconst NonNegContinuousExpert{z<:ZeroInflation} = ContinuousExpert{NonNegative, z}\n# Zero-inflated\nconst ZIDiscreteExpert = NonNegDiscreteExpert{ZI}\nconst ZIContinuousExpert = NonNegContinuousExpert{ZI}\n# Non zero-inflated\nconst NonZIDiscreteExpert = NonNegDiscreteExpert{NonZI}\nconst NonZIContinuousExpert = NonNegContinuousExpert{NonZI}","category":"page"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"A good number of expert functions are simply wrappers around the Distribution type in Distributions.jl (details here), and functions such as pdf and cdf are also directly using those in Distributions.jl.","category":"page"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"Specific to actuarial application, a collection of commonly used distributions are also included in this package, e.g. Burr, GammaCount, etc.","category":"page"},{"location":"experts/#Continuous-Distributions","page":"Expert Functions","title":"Continuous Distributions","text":"","category":"section"},{"location":"experts/","page":"Expert Functions","title":"Expert Functions","text":"GammaExpert","category":"page"},{"location":"experts/#LRMoE.GammaExpert","page":"Expert Functions","title":"LRMoE.GammaExpert","text":"GammaExpert(k, θ)\n\nExpert function: GammaExpert(k, θ).\n\n\n\n\n\n","category":"type"},{"location":"#LRMoE-Package","page":"Overview","title":"LRMoE Package","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"LRMoE is a package tailor-made for actuarial applications which allows actuarial researchers and practitioners to model and analyze insurance loss frequencies and severities using the Logit-weighted Reduced Mixture-of-Experts (LRMoE) model. The flexibility of LRMoE models is theoretically justified in Fung et al. (2019), and an application of LRMoE for modelling correlated insurance claim frequencies is in Fung et al. (2019).","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The package LRMoE offers several new distinctive features which are motivated by various actuarial applications and mostly cannot be achieved using existing packages for mixture models. Key features include:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"A wider coverage on frequency and severity distributions and their zero inflation;\nThe flexibility to vary classes of distributions across components;\nParameter estimation under data censoring and truncation;\nA collection of insurance rate making and reserving functions; and\nModel selection and visualization tools.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"While LRMoE was initially developed for actuarial application, this package also allows for customized expert functions for various modelling problems outside of the insurance context. For more details, see here.","category":"page"}]
}
